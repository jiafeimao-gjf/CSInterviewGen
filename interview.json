{
  "computer_science_interview_questions": {
    "basic_concepts": [
      {
        "id": 1,
        "question": "什么是计算机？",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "计算机是一种能够接受数据、处理数据、产生信息输出的电子设备。它由硬件和软件组成，能够执行算术运算、逻辑运算、数据存储和控制操作。"
      },
      {
        "id": 2,
        "question": "解释RAM和ROM的区别",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "RAM（随机存取存储器）是易失性存储器，断电后数据丢失，用于临时存储正在运行的程序和数据。ROM（只读存储器）是非易失性存储器，断电后数据不丢失，用于存储固件和启动程序。"
      },
      {
        "id": 3,
        "question": "什么是操作系统？列举几个常见的操作系统",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "操作系统是管理计算机硬件和软件资源的核心系统软件，为用户和应用程序提供接口。常见操作系统包括Windows、macOS、Linux、Android、iOS等。"
      },
      {
        "id": 4,
        "question": "解释编译器和解释器的区别",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "编译器将整个源代码一次性转换为目标代码（机器码），然后执行。解释器逐行读取源代码并立即执行，不生成目标文件。编译执行更快，解释执行更灵活。"
      },
      {
        "id": 5,
        "question": "什么是二进制？为什么计算机使用二进制？",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "二进制是基数为2的数字系统，只使用0和1两个数字。计算机使用二进制因为电子器件的物理特性（开/关、高/低电压）天然适合表示二进制状态，且二进制运算简单可靠。"
      },
      {
        "id": 6,
        "question": "解释进程和线程的区别",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "进程是程序执行的实例，拥有独立的内存空间。线程是进程内的执行单元，同一进程内的线程共享内存空间。线程比进程更轻量级，创建和切换开销更小。"
      },
      {
        "id": 7,
        "question": "什么是API？",
        "difficulty": "浅",
        "category": "基础概念",
        "answer": "API（应用程序编程接口）是软件组件之间交互的接口规范。它定义了如何调用服务、传递参数和获取结果，使得不同软件系统能够相互通信和集成。"
      }
    ],
    "data_structures": [
      {
        "id": 8,
        "question": "数组和链表有什么区别？",
        "difficulty": "浅",
        "category": "数据结构",
        "answer": "数组是连续内存存储，支持随机访问，插入/删除元素开销大。链表是非连续存储，通过指针连接元素，插入/删除元素开销小，但不支持随机访问，只能顺序访问。"
      },
      {
        "id": 9,
        "question": "什么是栈？它有什么特点？",
        "difficulty": "浅",
        "category": "数据结构",
        "answer": "栈是一种后进先出（LIFO）的线性数据结构。只能在栈顶进行插入（入栈）和删除（出栈）操作。常用于函数调用、表达式求值、括号匹配等场景。"
      },
      {
        "id": 10,
        "question": "什么是队列？它有什么特点？",
        "difficulty": "浅",
        "category": "数据结构",
        "answer": "队列是一种先进先出（FIFO）的线性数据结构。在一端（队尾）插入元素，在另一端（队头）删除元素。常用于任务调度、广度优先搜索等场景。"
      },
      {
        "id": 11,
        "question": "解释哈希表的工作原理",
        "difficulty": "中",
        "category": "数据结构",
        "answer": "哈希表通过哈希函数将键映射到数组索引，实现快速的数据存储和检索。理想情况下查找、插入、删除的时间复杂度为O(1)。需要处理哈希冲突，常用方法有链地址法和开放地址法。"
      },
      {
        "id": 12,
        "question": "什么是二叉树？有哪些遍历方式？",
        "difficulty": "中",
        "category": "数据结构",
        "answer": "二叉树是每个节点最多有两个子节点的树结构。遍历方式包括：前序遍历（根-左-右）、中序遍历（左-根-右）、后序遍历（左-右-根）和层序遍历（按层级从上到下）。"
      },
      {
        "id": 13,
        "question": "解释平衡二叉树（AVL树）的概念",
        "difficulty": "中",
        "category": "数据结构",
        "answer": "AVL树是高度平衡的二叉搜索树，其中任何节点的两个子树高度差不超过1。通过左旋、右旋等操作维持平衡，确保查找、插入、删除操作的时间复杂度为O(log n)。"
      },
      {
        "id": 14,
        "question": "什么是堆？它有什么应用场景？",
        "difficulty": "中",
        "category": "数据结构",
        "answer": "堆是一种特殊的完全二叉树，分为最大堆和最小堆。最大堆中父节点值大于子节点值，最小堆中父节点值小于子节点值。常用于优先队列、堆排序、Top K问题等。"
      },
      {
        "id": 15,
        "question": "解释图的表示方法：邻接矩阵和邻接表",
        "difficulty": "中",
        "category": "数据结构",
        "answer": "邻接矩阵使用二维数组表示图，适合稠密图，空间复杂度O(V²)。邻接表使用链表数组表示图，适合稀疏图，空间复杂度O(V+E)。邻接矩阵查询两点间是否有边更快，邻接表节省空间。"
      },
      {
        "id": 16,
        "question": "什么是Trie树（前缀树）？它有什么优势？",
        "difficulty": "中",
        "category": "数据结构",
        "answer": "Trie树是一种树形数据结构，用于高效存储和检索字符串集合。每个节点代表一个字符，从根到节点的路径表示一个字符串。优势包括快速前缀匹配、节省存储空间（共享前缀）、支持有序遍历等。"
      }
    ],
    "algorithms": [
      {
        "id": 17,
        "question": "解释时间复杂度和空间复杂度",
        "difficulty": "浅",
        "category": "算法",
        "answer": "时间复杂度描述算法执行时间随输入规模增长的变化趋势。空间复杂度描述算法所需存储空间随输入规模增长的变化趋势。常用大O记号表示，如O(1)、O(n)、O(log n)、O(n²)等。"
      },
      {
        "id": 18,
        "question": "什么是递归？它有什么优缺点？",
        "difficulty": "浅",
        "category": "算法",
        "answer": "递归是一种通过函数调用自身来解决问题的方法。优点是代码简洁、逻辑清晰，适合解决具有递归结构的问题。缺点是可能产生大量重复计算、占用较多栈空间，可能导致栈溢出。"
      },
      {
        "id": 19,
        "question": "解释冒泡排序的原理",
        "difficulty": "浅",
        "category": "算法",
        "answer": "冒泡排序重复遍历待排序序列，比较相邻元素，如果顺序错误就交换它们。每一轮遍历都会将最大（或最小）元素移动到正确位置，就像气泡上浮一样。时间复杂度O(n²)。"
      },
      {
        "id": 20,
        "question": "解释快速排序的原理",
        "difficulty": "中",
        "category": "算法",
        "answer": "快速排序采用分治策略。选择一个基准元素，将数组分为两部分：小于基准的元素放左边，大于基准的元素放右边。然后递归地对左右子数组进行排序。平均时间复杂度O(n log n)。"
      },
      {
        "id": 21,
        "question": "解释归并排序的原理",
        "difficulty": "中",
        "category": "算法",
        "answer": "归并排序采用分治策略。将数组不断二分直到子数组只有一个元素，然后将子数组两两合并成有序数组，最终得到完全有序的数组。时间复杂度稳定为O(n log n)，是稳定排序算法。"
      },
      {
        "id": 22,
        "question": "解释二分查找的原理及适用条件",
        "difficulty": "中",
        "category": "算法",
        "answer": "二分查找在有序数组中查找目标值。每次比较中间元素与目标值，根据大小关系排除一半元素，继续在剩余部分查找。时间复杂度O(log n)。适用条件是数组必须有序。"
      },
      {
        "id": 23,
        "question": "什么是动态规划？它的核心思想是什么？",
        "difficulty": "中",
        "category": "算法",
        "answer": "动态规划是通过把原问题分解为相对简单的子问题的方式求解复杂问题的方法。核心思想是保存已解决子问题的答案，避免重复计算。适用于具有重叠子问题和最优子结构性质的问题。"
      },
      {
        "id": 24,
        "question": "解释深度优先搜索（DFS）和广度优先搜索（BFS）",
        "difficulty": "中",
        "category": "算法",
        "answer": "DFS沿着图的深度遍历节点，尽可能深的搜索图的分支，通常用栈实现。BFS按层级遍历图，先访问离起始节点近的节点，通常用队列实现。DFS适合路径查找，BFS适合最短路径查找。"
      },
      {
        "id": 25,
        "question": "解释Dijkstra算法的原理",
        "difficulty": "深",
        "category": "算法",
        "answer": "Dijkstra算法用于求解单源最短路径问题。维护一个距离数组和已访问节点集合，每次选择距离源点最近的未访问节点，更新其邻居节点的距离。适用于非负权重图，时间复杂度O((V+E)log V)。"
      }
    ],
    "operating_systems": [
      {
        "id": 26,
        "question": "什么是死锁？产生的必要条件是什么？",
        "difficulty": "中",
        "category": "操作系统",
        "answer": "死锁是多个进程因竞争资源而造成的一种僵局，若无外力作用，所有进程都无法继续执行。产生死锁的四个必要条件：互斥条件、请求和保持条件、不剥夺条件、循环等待条件。"
      },
      {
        "id": 27,
        "question": "解释虚拟内存的概念和作用",
        "difficulty": "中",
        "category": "操作系统",
        "answer": "虚拟内存是计算机系统内存管理的一种技术，它为每个进程提供一个大的、一致的、私有的地址空间。作用包括：扩大可用内存、内存保护、简化内存管理、支持多进程共享物理内存。"
      },
      {
        "id": 28,
        "question": "什么是页面置换算法？列举几种常见的算法",
        "difficulty": "中",
        "category": "操作系统",
        "answer": "页面置换算法用于在内存不足时选择要淘汰的页面。常见算法包括：先进先出(FIFO)、最近最久未使用(LRU)、最佳置换(OPT)、时钟算法等。LRU较为常用，性能较好。"
      },
      {
        "id": 29,
        "question": "解释进程调度算法",
        "difficulty": "中",
        "category": "操作系统",
        "answer": "进程调度算法决定哪个进程获得CPU执行权。常见算法包括：先来先服务(FCFS)、短作业优先(SJF)、优先级调度、时间片轮转(RR)、多级队列调度等。不同算法有不同的优缺点和适用场景。"
      },
      {
        "id": 30,
        "question": "什么是系统调用？它与函数调用有什么区别？",
        "difficulty": "中",
        "category": "操作系统",
        "answer": "系统调用是用户程序请求操作系统内核服务的接口。与函数调用的区别：系统调用运行在内核态，函数调用运行在用户态；系统调用开销更大，涉及用户态和内核态切换；系统调用提供底层服务，函数调用实现程序逻辑。"
      },
      {
        "id": 31,
        "question": "解释缓冲区溢出及其安全风险",
        "difficulty": "深",
        "category": "操作系统",
        "answer": "缓冲区溢出是指程序向缓冲区写入超过其容量的数据，导致覆盖相邻内存区域。安全风险包括：程序崩溃、数据损坏、执行恶意代码。防范措施包括：边界检查、使用安全函数、地址空间布局随机化(ASLR)等。"
      }
    ],
    "computer_networks": [
      {
        "id": 32,
        "question": "OSI七层模型有哪些层？各层的作用是什么？",
        "difficulty": "中",
        "category": "计算机网络",
        "answer": "应用层（用户接口）、表示层（数据格式转换）、会话层（建立/管理会话）、传输层（端到端通信）、网络层（路径选择）、数据链路层（帧传输）、物理层（比特流传输）。各层独立又协作，实现网络通信。"
      },
      {
        "id": 33,
        "question": "TCP和UDP的区别是什么？",
        "difficulty": "中",
        "category": "计算机网络",
        "answer": "TCP是面向连接的可靠传输协议，提供流量控制、拥塞控制、错误检测和纠正。UDP是无连接的不可靠传输协议，传输速度快，开销小。TCP适用于要求可靠性的应用，UDP适用于实时性要求高的应用。"
      },
      {
        "id": 34,
        "question": "解释三次握手和四次挥手",
        "difficulty": "中",
        "category": "计算机网络",
        "answer": "三次握手建立TCP连接：客户端发送SYN，服务器回复SYN+ACK，客户端发送ACK。四次挥手断开TCP连接：一方发送FIN，另一方回复ACK，再发送FIN，最后一方回复ACK。确保数据完整传输。"
      },
      {
        "id": 35,
        "question": "什么是HTTP和HTTPS？它们有什么区别？",
        "difficulty": "中",
        "category": "计算机网络",
        "answer": "HTTP是超文本传输协议，用于在Web上传输数据。HTTPS是HTTP的安全版本，通过SSL/TLS加密传输数据。区别：HTTPS更安全（数据加密）、使用443端口（HTTP是80）、需要证书、性能稍低。"
      },
      {
        "id": 36,
        "question": "解释DNS的工作原理",
        "difficulty": "中",
        "category": "计算机网络",
        "answer": "DNS将域名解析为IP地址。过程：本地DNS缓存查找→本地DNS服务器查询→根DNS服务器→顶级域服务器→权威DNS服务器→返回IP地址。采用分布式层次化结构，提高解析效率和可靠性。"
      },
      {
        "id": 37,
        "question": "什么是CDN？它有什么作用？",
        "difficulty": "中",
        "category": "计算机网络",
        "answer": "CDN（内容分发网络）是分布在全球各地的服务器网络，将网站内容缓存到离用户最近的节点。作用：提高访问速度、减轻源服务器负载、提高可用性和可靠性、降低带宽成本。"
      },
      {
        "id": 38,
        "question": "解释ARP协议的作用",
        "difficulty": "深",
        "category": "计算机网络",
        "answer": "ARP（地址解析协议）用于将网络层的IP地址解析为数据链路层的MAC地址。当主机需要发送数据但不知道目标MAC地址时，发送ARP请求广播，目标主机回复ARP响应，建立IP-MAC映射关系。"
      }
    ],
    "databases": [
      {
        "id": 39,
        "question": "什么是关系型数据库？它有什么特点？",
        "difficulty": "中",
        "category": "数据库",
        "answer": "关系型数据库基于关系模型，使用表格存储数据，表格间通过主外键关联。特点：数据结构化、数据独立性高、数据共享性好、数据冗余小、统一的数据保护功能、数据一致性和可维护性好。"
      },
      {
        "id": 40,
        "question": "解释SQL中的JOIN操作",
        "difficulty": "中",
        "category": "数据库",
        "answer": "JOIN用于连接两个或多个表的数据。INNER JOIN返回两表匹配的记录；LEFT JOIN返回左表所有记录及右表匹配记录；RIGHT JOIN返回右表所有记录及左表匹配记录；FULL JOIN返回两表所有记录。"
      },
      {
        "id": 41,
        "question": "什么是数据库事务？ACID特性是什么？",
        "difficulty": "中",
        "category": "数据库",
        "answer": "数据库事务是作为一个单元执行的一组操作。ACID特性：原子性（Atomicity，要么全做要么全不做）、一致性（Consistency，事务执行前后数据保持一致）、隔离性（Isolation，并发事务互不干扰）、持久性（Durability，事务结果永久保存）。"
      },
      {
        "id": 42,
        "question": "解释数据库索引及其优缺点",
        "difficulty": "中",
        "category": "数据库",
        "answer": "索引是数据库中对一列或多列值排序的数据结构，用于加速数据检索。优点：提高查询速度、保证数据唯一性、加速表间连接。缺点：占用存储空间、降低写操作性能、维护索引需要额外开销。"
      },
      {
        "id": 43,
        "question": "什么是数据库范式？解释第一范式到第三范式",
        "difficulty": "深",
        "category": "数据库",
        "answer": "数据库范式是设计关系数据库的规范。第一范式：字段原子性，不可再分；第二范式：满足第一范式且非主键字段完全依赖主键；第三范式：满足第二范式且非主键字段不依赖其他非主键字段。范式越高，冗余越少，但可能增加查询复杂度。"
      },
      {
        "id": 44,
        "question": "解释数据库锁机制",
        "difficulty": "深",
        "category": "数据库",
        "answer": "数据库锁用于控制并发访问，保证数据一致性。按级别分为：表级锁、行级锁、页级锁。按类型分为：共享锁（读锁）、排他锁（写锁）。按思想分为：悲观锁、乐观锁。合理使用锁能提高并发性能，不当使用会导致死锁。"
      }
    ],
    "system_design": [
      {
        "id": 45,
        "question": "什么是负载均衡？有哪些负载均衡算法？",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "负载均衡将工作负载分配到多个服务器，避免单点过载。算法包括：轮询、加权轮询、最少连接、加权最少连接、IP哈希、随机等。可提高系统性能、可用性和可扩展性。"
      },
      {
        "id": 46,
        "question": "解释CAP理论",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "CAP理论指出分布式系统只能同时满足一致性(Consistency)、可用性(Availability)、分区容错性(Partition tolerance)中的两个。网络分区不可避免，因此只能在CP和AP之间选择。实际系统通常选择最终一致性来平衡三者。"
      },
      {
        "id": 47,
        "question": "什么是微服务架构？它有什么优缺点？",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "微服务架构将单一应用拆分为多个小型服务，每个服务独立开发、部署、扩展。优点：技术栈灵活、独立部署、容错性好、易于扩展。缺点：复杂性增加、网络延迟、数据一致性挑战、运维成本高。"
      },
      {
        "id": 48,
        "question": "解释缓存策略和缓存失效策略",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "缓存策略包括：Cache-Aside（应用代码管理）、Read-Through（缓存自动加载）、Write-Through（同步写入）、Write-Behind（异步写入）。缓存失效策略包括：LRU（最近最少使用）、LFU（最不经常使用）、FIFO（先进先出）、TTL（生存时间）。"
      },
      {
        "id": 49,
        "question": "什么是消息队列？它有什么作用？",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "消息队列是应用程序间的异步通信方式，通过存储和转发消息解耦生产者和消费者。作用：解耦、异步处理、削峰填谷、可靠性保证、顺序保证。常用于日志处理、订单处理、通知服务等场景。"
      },
      {
        "id": 50,
        "question": "如何设计一个短URL系统？",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "短URL系统设计要点：1) ID生成算法（Base62编码、雪花算法等）；2) 数据存储（关系数据库、NoSQL）；3) 分布式部署；4) 缓存机制；5) 重定向服务；6) 访问统计；7) 防刷机制。需要考虑性能、扩展性、可靠性等。"
      },
      {
        "id": 51,
        "question": "解释一致性哈希算法",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "一致性哈希解决了分布式缓存中节点增减导致大量缓存失效的问题。将数据和节点映射到同一环形空间，数据顺时针查找最近节点存储。节点增减只影响相邻节点数据，大大减少了数据迁移。"
      },
      {
        "id": 52,
        "question": "什么是分布式事务？如何实现？",
        "difficulty": "深",
        "category": "系统设计",
        "answer": "分布式事务涉及多个独立的数据库或服务，需要保证所有操作要么全部成功要么全部失败。实现方式：两阶段提交(2PC)、三阶段提交(3PC)、TCC补偿事务、本地消息表、消息事务等。各有优缺点，需根据场景选择。"
      }
    ]
  }
}