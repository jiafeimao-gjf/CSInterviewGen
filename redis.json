[
  {
    "title": "Redis底层数据结构：SDS",
    "content": "SDS（Simple Dynamic String）是Redis字符串的实现方式，内部包含buf数组、字符串长度和剩余空间等字段。相比C语言字符串，SDS避免了缓冲区溢出，支持二进制数据存储，并能自动扩容，提高内存使用效率。"
  },
  {
    "title": "Redis字典结构：哈希表实现",
    "content": "Redis使用字典（dict）结构存储键值对，底层是哈希表+链表的组合。字典包含两个entry数组，一个用于正常操作，一个用于扩容时转移数据，实现渐进式扩容，避免服务中断。"
  },
  {
    "title": "压缩列表ziplist",
    "content": "ziplist是一种特殊编码的双向链表，用于小数据量存储。它将列表项连续存储在一块内存中，节省内存空间，通过变长编码存储整数，避免内存碎片。适用于小集合和小列表。"
  },
  {
    "title": "快速列表quicklist",
    "content": "quicklist是ziplist和双向链表的结合，既保留了ziplist的内存效率，又具有链表的灵活性。每个quicklist节点包含一个ziplist，既支持两端的O(1)操作，又避免了ziplist过大时的内存拷贝问题。"
  },
  {
    "title": "跳跃表skiplist",
    "content": "skiplist用于实现有序集合，是一种多层链表结构，提供O(logN)的查找效率。Redis使用skiplist来实现有序集合的排序功能，同时结合字典实现快速查找。"
  },
  {
    "title": "Redis的单线程模型",
    "content": "Redis采用单线程事件驱动模型处理客户端请求，通过IO多路复用（如epoll）管理大量连接。这种设计避免了多线程竞争，简化了实现，同时保证了高吞吐量和低延迟。"
  },
  {
    "title": "Redis持久化机制：RDB",
    "content": "RDB（Redis Database）是快照持久化方式，定期将内存数据保存到二进制文件。支持配置保存策略，如在特定时间内有N次修改就保存。RDB文件紧凑，恢复速度快，但可能丢失最后一次快照后的数据。"
  },
  {
    "title": "Redis持久化机制：AOF",
    "content": "AOF（Append Only File）是追加日志持久化方式，记录每个写操作命令。通过重写机制（rewrite）压缩日志文件，保证文件大小可控。AOF可以配置不同同步策略，提供更好的数据安全性。"
  },
  {
    "title": "Redis复制机制",
    "content": "Redis支持主从复制，主节点将数据同步给从节点。复制过程包括全量同步和部分同步，从节点在断线后自动尝试重新连接。复制实现数据备份和读写分离，提高系统可用性。"
  },
  {
    "title": "Redis集群：哈希槽分配",
    "content": "Redis集群将数据分为16384个哈希槽，每个槽分配给一个节点管理。通过CRC16算法计算key的哈希值，确定槽位置。集群自动处理节点故障和数据迁移，实现高可用和水平扩展。"
  },
  {
    "title": "Redis分布式锁实现",
    "content": "使用setnx命令实现分布式锁，设置key时指定过期时间。通过Lua脚本保证原子性，避免死锁。例如：SET resource_name my_random_value NX PX 30000。"
  },
  {
    "title": "Redis计数器应用",
    "content": "利用Redis的原子操作（incr/decr）实现计数器，如网站访问量统计、点赞数等。支持分布式环境下的并发计数，比数据库查询效率高得多。"
  },
  {
    "title": "Redis排行榜实现",
    "content": "利用有序集合（ZSET）的score排序功能实现排行榜，如用户积分排名、商品销量排名。通过ZADD添加元素，ZCOUNT统计排名，ZREVRANGE获取排名列表。"
  },
  {
    "title": "Redis缓存策略",
    "content": "Redis作为缓存层，使用缓存击穿、缓存穿透、缓存雪崩等策略。常用缓存更新策略包括Cache-Aside、Read-Through、Write-Through等，提高系统性能和稳定性。"
  },
  {
    "title": "Redis消息队列实现",
    "content": "利用Redis的列表数据结构实现消息队列，如LPUSH和RPOP。生产者使用LPUSH将消息加入队列，消费者使用RPOP取出消息。可结合BLPOP实现阻塞式消费，实现轻量级消息队列。"
  },
  {
    "title": "Redis地理位置搜索",
    "content": "Redis支持地理空间索引，使用GEOADD、GEORADIUS等命令实现地理位置查询。将坐标存储在有序集合中，通过半径查询获取附近地点，适用于打车、外卖等应用。"
  },
  {
    "title": "Redis内存淘汰策略",
    "content": "当内存不足时，Redis根据配置的淘汰策略（如noeviction、allkeys-lru、volatile-lru等）删除部分数据。LRU（最近最少使用）和LFU（最不经常使用）是常用策略。"
  },
  {
    "title": "Redis事务机制",
    "content": "Redis支持事务，使用MULTI、EXEC命令实现。事务保证了命令的原子性执行，但不支持回滚。Redis的事务是基于队列的，命令按顺序执行，但不支持回滚机制。"
  },
  {
    "title": "Redis Lua脚本执行",
    "content": "Redis支持在服务器端执行Lua脚本，通过EVAL命令执行。Lua脚本可以包含复杂逻辑，保证原子性，减少网络往返。适合实现分布式锁、复杂计数等场景。"
  },
  {
    "title": "Redis过期策略",
    "content": "Redis使用定期删除和惰性删除结合的过期策略。定期删除随机检查部分key，惰性删除在访问key时检查是否过期。避免了单次删除过多key导致的性能问题。"
  },
  {
    "title": "Redis发布/订阅模式",
    "content": "Redis提供pub/sub功能实现消息发布和订阅，使用publish和subscribe命令。客户端可以订阅特定频道，发布者向频道发送消息，实现系统模块间的解耦和异步通信。"
  },
  {
    "title": "Redis的内存优化技巧",
    "content": "Redis内存优化包括使用合适的编码方式（如ziplist代替hash）、合理设置过期时间、避免大key、使用哈希压缩等。这些技巧能显著降低内存占用，提高系统性能。"
  },
  {
    "title": "Redis连接池使用",
    "content": "在应用中使用连接池管理Redis连接，避免频繁创建和销毁连接。连接池可以设置最小和最大连接数，提高并发处理能力，减少系统开销。"
  },
  {
    "title": "Redis哨兵机制",
    "content": "Redis哨兵（Sentinel）用于监控主从节点状态，实现自动故障转移。当主节点故障时，哨兵集群会选举新的主节点，保证服务连续性，提高系统可靠性。"
  },
  {
    "title": "Redis性能调优参数",
    "content": "关键性能调优参数包括maxmemory（内存上限）、maxmemory-policy（内存淘汰策略）、tcp-backlog（TCP连接队列长度）等。合理配置这些参数能显著提升Redis性能。"
  }
]